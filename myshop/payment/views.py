from decimal import Decimal
import  stripe
from django.conf import settings
from django.shortcuts  import render, redirect, reverse, get_object_or_404
from django.views.decorators.csrf import csrf_exempt
from orders.models import Order









#creating the stripe instancez
stripe.api_key = settings.STRIPE_SECRET_KEY
stripe.api_version = settings.STRIPE_API_VERSION



#paymeny process view
def  payment_process(request):
    #function payment_process takes request as an object
    order_id = request.session.get('order_id',None)
    #current order object is retrieved from the database using order_id session key,which was 
    #stored previously in the session by order_create view
    order = get_object_or_404(Order, id=order_id)
    #Order object for given ID is retrieved  using shortcut function get_object_or_404()
    if request.method  == 'POST':
        success_url  = request.build_absolute_uri(reverse('payment:completed'))
        #methods contructs an absolute URL and URL is generated by reversing pattern
        #named 'payment:completed'
        cancel_url  = request.build_absolute_uri(reverse('payment:canceled'))
        #generates a `cancel_uri` using the same method and reverses the URL pattern named 'payment:cancelled'
        #Strip checkout session data
        
        
        session_data = {
            'mode':'payment',
            'client_reference_id':order.id,
            'success_url':success_url,
            'cancel_url':cancel_url,
            'line_items':[]
        }
        
        
        #adding order items to the stripe checkout session
        
        for item in  order.items.all():
            session_data['line_items'].append({
                'price_data':{
                    'unit_amount':int(item.price * Decimal('100')),
                    'currency':'usd',
                    'product_data':{
                        'name':item.product.name,
                    },
                },
                'quantity':item.quantity,
            })
            #creating stripe checkout session
        
        session = stripe.checkout.Session.create(**session_data)
        #creating stripe checkout  session
        return redirect(session.url, code=303)
    
    
    else:
        return render(request, 'payment/process.html',locals())
    
        
    
    
    

#The view for stripe  to redirect the user  if the payment is successful
def payment_completed(request):
    #receives request as a paramter
    return render(request, 'payment/completed.html')


#The  view for stripe to redirect the user to if the payment is cancelled
def payment_cancelled(request):
    return render(request, 'payment/canceled.html')









@csrf_exempt
def stripe_webhook(request):
    # Retrieve the request's body and parse it as JSON
    payload = request.body.decode('utf-8')
    event = None

    try:
        event = json.loads(payload)
    except ValueError as e:
        # Invalid payload
        return HttpResponse(status=400)

    # Handle the event
    if event['type'] == 'checkout.session.completed':
        session = event['data']['object']
        if session['mode'] == 'payment' and session['payment_status'] == 'paid':
            try:
                order = Order.objects.get(id=session['client_reference_id'])
            except Order.DoesNotExist:
                return HttpResponse(status=404)

            # Marking order as paid
            order.paid = True
            # Store Stripe payment ID
            order.stripe_id = session['payment_intent']
            order.save()

            # Launching asynchronous task
            payment_completed.delay(order.id)

    return HttpResponse(status=200)
            